# -*- coding: utf-8 -*-
"""Project 2 Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sM_ua_2EGDGBS3AXiWJsPM1e9romfJlJ
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import TimeSeriesSplit

data_train = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv')
data_train.head()

threshold = 0.1* data_train.Temp.max()-data_train.Temp.min()

data_train.isnull().sum()

dates = data_train['Date'].values
temp  = data_train['Temp'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature average',
          fontsize=20);

windowSize=50

X = np.zeros((temp.shape[0]-windowSize,windowSize))
Y = np.zeros(temp.shape[0]-windowSize)

for i in range(X.shape[0]):
  X[i] = temp[i:i+50]
  Y[i] = temp[i+50]

Splitdata = int(temp.shape[0]*0.8)

X_latih,X_tes,Y_latih,Y_tes = X[:Splitdata],X[Splitdata:],Y[:Splitdata],Y[Splitdata:]

X_latih= np.expand_dims(X_latih,axis=-1)
X_tes = np.expand_dims(X_tes,axis=-1)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_mae')<threshold):
      print("\n MAE < 10%*skala!")
      self.model.stop_training = True
callbacks = myCallback()

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(50,input_shape=(50,1)),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.Adam(learning_rate=1.0000e-04)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

model.summary()

history = model.fit(X_latih,Y_latih,epochs=100,verbose=1,validation_data=(X_tes,Y_tes))

Ypred = model.predict(X_tes).reshape(-1).tolist()

history.history['val_mae'][-1]

threshold

"""1.7<2.6 , kondisi MAE <10% terpenuhi"""

plt.plot(Y_tes,color="Blue")
plt.plot(Ypred,color="Red")
plt.show() #looks good

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Mae')
plt.ylabel('Mae')
plt.xlabel('Epoch')
plt.legend(['Train','valid'], loc='upper right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model LOSS')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','valid'], loc='upper right')
plt.show()